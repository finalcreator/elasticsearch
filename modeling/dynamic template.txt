1. dynamic template定义
Dynamic templates allow you greater control of how Elasticsearch maps your data 
beyond the default dynamic field mapping rules. You enable dynamic mapping 
by setting the dynamic parameter to true or runtime. You can then use dynamic templates 
to define custom mappings that can be applied to dynamically added fields 
based on the matching condition:
1）match_mapping_type operates on the data type that Elasticsearch detects
2）match and unmatch use a pattern to match on the field name
3）path_match and path_unmatch operate on the full dotted path to the field
Use the {name} and {dynamic_type} template variables in the mapping specification as placeholders.

Dynamic template可以根据Elasticsearch识别的数据类型，结合字段名称，来动态的设定字段类型。
比如：
    将所有字符串设定了keyword,或者关闭keyword字段；
    is开头的都设置为boolean类型
    long_开头的都设置为long类型  

match_mapping_type: 匹配自动识别的字段类型，如staring,blog_comments_relation
match、unmatch: 匹配字段名称
path_match、path_unmatch: 按照对象路径进行匹配，见例7


2. dynamic template 模板
"dynamic_templates": [
    {
      "my_template_name": { 
        ...  match conditions ... 
        "mapping": { ... } 
      }
    },
    ...
]
	
The template name can be any string value.
The match conditions can include any of : match_mapping_type, match, match_pattern, unmatch, path_match, path_unmatch.
The mapping that the matched field should use.


4. 例1：you can create a dynamic template that maps new strings as runtime fields of type ip
定义了一个叫做strings_as_ip的dynamic template, 将string类型且以ip开头的字段，运行时字段类型定义为ip类型
PUT my-index-000001/
{
  "mappings": {
    "dynamic_templates": [
      {
        "strings_as_ip": {
          "match_mapping_type": "string",
          "match": "ip*",
          "runtime": {
            "type": "ip"
          }
        }
      }
    ]
  }
}
GET my-index-000001/_mapping

PUT my-index-000001/_doc/1
{
  "ipAddr1": "128.2.2.1",
  "ipAddr2": "128.0.0.1"
}

GET my-index-000001/_doc/1

{
    "my-index-000001" : {
      "mappings" : {
        "dynamic_templates" : [
          {
            "strings_as_ip" : {
              "match" : "ip*",
              "match_mapping_type" : "string",
              "runtime" : {
                "type" : "ip"
              }
            }
          }
        ],
        "runtime" : {
          "ipAddr1" : {
            "type" : "ip"
          },
          "ipAddr2" : {
            "type" : "ip"
          }
        }
      }
    }
}


5. 例2 long转integer
PUT my-index-000001
{
  "mappings": {
    "dynamic_templates": [
      {
        "integers": {
          "match_mapping_type": "long",
          "mapping": {
            "type": "integer"
          }
        }
      },
      {
        "strings": {
          "match_mapping_type": "string",
          "mapping": {
            "type": "text",
            "fields": {
              "raw": {
                "type":  "keyword",
                "ignore_above": 256
              }
            }
          }
        }
      }
    ]
  }
}

PUT my-index-000001/_doc/1
{
  "my_integer": 5, 
  "my_string": "Some string" 
}
GET my-index-000001/_doc/1
GET my-index-000001/_mapping
可以看到my_integer从long转化为了integer, 而字符串my_string被转化为了text, 并带一个keyword.

6. 例3 match和unmatch
PUT my-index-000001
{
  "mappings": {
    "dynamic_templates": [
      {
        "longs_as_strings": {
          "match_mapping_type": "string",
          "match":   "long_*",
          "unmatch": "*_text",
          "mapping": {
            "type": "long"
          }
        }
      }
    ]
  }
}

PUT my-index-000001/_doc/1
{
  "long_num": "5", 
  "long_text": "foo" 
}
GET my-index-000001/_doc/1
GET my-index-000001/_mapping
long_num 满足 “long_*”的条件，因此被映射为long, 而long_text由于满足unmatch的条件“*_text”，因此不会被
映射为long, 保留默认的text带key.

7. path_match and path_unmatch
PUT my-index-000001
{
  "mappings": {
    "dynamic_templates": [
      {
        "full_name": {
          "path_match":   "name.*",
          "path_unmatch": "*.middle",
          "mapping": {
            "type": "text",
            "copy_to": "full_name"
          }
        }
      }
    ]
  }
}

PUT my-index-000001/_doc/1
{
  "name": {
    "first":  "John",
    "middle": "Winston",
    "last":   "Lennon"
  }
}
GET my-index-000001/_doc/1
GET my-index-000001/_mapping

下面会报错，因为title不是一个string,无法映射为text
PUT my-index-000001/_doc/2
{
  "name": {
    "first":  "Paul",
    "last":   "McCartney",
    "title": {
      "value": "Sir",
      "category": "order of chivalry"
    }
  }
}

8. placeholder {name} 和 {dynamic_type}
PUT my-index-000001
{
  "mappings": {
    "dynamic_templates": [
      {
        "named_analyzers": {
          "match_mapping_type": "string",
          "match": "*",
          "mapping": {
            "type": "text",
            "analyzer": "{name}"
          }
        }
      },
      {
        "no_doc_values": {
          "match_mapping_type":"*",
          "mapping": {
            "type": "{dynamic_type}"
          }
        }
      }
    ]
  }
}

PUT my-index-000001/_doc/1
{
  "english": "Some English text", 
  "count":   5 
}
GET my-index-000001/_doc/1
GET my-index-000001/_mapping
可以看到例子中{dynamic_type}就是long, 因为count传入5，dynamic template默认就是long型。
而analyzer就是english, 对应{name}

Elasticsearch automatically detects the following data types：
https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-templates.html#match-unmatch