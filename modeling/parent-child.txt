1. Parent / Child 关系
由于对象和 Nested 对象的局限性，每次更新，需要重新索引整个对象（包括根对象和嵌套对象）
ES 提供了类似关系型数据库中 Join 的实现。
使⽤ Join 数据类型实现，可以通过维护 Parent / Child 的关系，从⽽分离两个对象
● ⽗⽂档和⼦⽂档是两个独⽴的⽂档
● 更新⽗⽂档⽆需重新索引⼦⽂档。⼦⽂档被添加，更新或者删除也不会影响到⽗⽂档和其他的⼦⽂档

2. 定义⽗⼦关系的⼏个步骤
1）设置索引的 Mapping
2）索引⽗⽂档
3）索引⼦⽂档
4）按需查询⽂档

DELETE my_blogs

# 设定 Parent/Child Mapping
PUT my_blogs
{
  "settings": {
    "number_of_shards": 2
  },
  "mappings": {
    "properties": {
      "blog_comments_relation": {
        "type": "join",
        "relations": {
          "blog": "comment"
        }
      },
      "content": {
        "type": "text"
      },
      "title": {
        "type": "keyword"
      }
    }
  }
}
关键是要指定type为join, relations里指定父子关系
"blog": "comment" 即blog为comment的parent


#添加父文档
PUT my_blogs/_doc/blog1
{
  "title":"Learning Elasticsearch",
  "content":"learning ELK @ geektime",
  "blog_comments_relation":{
    "name":"blog"
  }
}

#添加父文档
PUT my_blogs/_doc/blog2
{
  "title":"Learning Hadoop",
  "content":"learning Hadoop",
    "blog_comments_relation":{
    "name":"blog"
  }
}


# 添加子文档， 指定 routing，确保和⽗⽂档索引到相同的分⽚
PUT my_blogs/_doc/comment1?routing=blog1
{
  "comment":"I am learning ELK",
  "username":"Jack",
  "blog_comments_relation":{
    "name":"comment",
    "parent":"blog1"
  }
}

#索引子文档
PUT my_blogs/_doc/comment2?routing=blog2
{
  "comment":"I like Hadoop!!!!!",
  "username":"Jack",
  "blog_comments_relation":{
    "name":"comment",
    "parent":"blog2"
  }
}

#索引子文档
PUT my_blogs/_doc/comment3?routing=blog2
{
  "comment":"Hello Hadoop",
  "username":"Bob",
  "blog_comments_relation":{
    "name":"comment",
    "parent":"blog2"
  }
}

# 查询所有文档
POST my_blogs/_search
{

}

result:从结果中可以看到，父子文档在同一个index中，子文档通过parent指向了父文档
"hits" : [
    {
      "_index" : "my_blogs",
      "_type" : "_doc",
      "_id" : "blog1",
      "_score" : 1.0,
      "_source" : {
        "title" : "Learning Elasticsearch",
        "content" : "learning ELK @ geektime",
        "blog_comments_relation" : {
          "name" : "blog"
        }
      }
    },
    {
      "_index" : "my_blogs",
      "_type" : "_doc",
      "_id" : "blog2",
      "_score" : 1.0,
      "_source" : {
        "title" : "Learning Hadoop",
        "content" : "learning Hadoop",
        "blog_comments_relation" : {
          "name" : "blog"
        }
      }
    },
    {
      "_index" : "my_blogs",
      "_type" : "_doc",
      "_id" : "comment1",
      "_score" : 1.0,
      "_routing" : "blog1",
      "_source" : {
        "comment" : "I am learning ELK",
        "username" : "Jack",
        "blog_comments_relation" : {
          "name" : "comment",
          "parent" : "blog1"
        }
      }
    },
    {
      "_index" : "my_blogs",
      "_type" : "_doc",
      "_id" : "comment2",
      "_score" : 1.0,
      "_routing" : "blog2",
      "_source" : {
        "comment" : "I like Hadoop!!!!!",
        "username" : "Jack",
        "blog_comments_relation" : {
          "name" : "comment",
          "parent" : "blog2"
        }
      }
    },
    {
      "_index" : "my_blogs",
      "_type" : "_doc",
      "_id" : "comment3",
      "_score" : 1.0,
      "_routing" : "blog2",
      "_source" : {
        "comment" : "Hello Hadoop",
        "username" : "Bob",
        "blog_comments_relation" : {
          "name" : "comment",
          "parent" : "blog2"
        }
      }
    }
  ]


#根据父文档ID查看
GET my_blogs/_doc/blog2

# 通过 Parent Id 查询数据
POST my_blogs/_search
{
  "query": {
    "parent_id": {
      "type": "comment",
      "id": "blog2"
    }
  }
}

# Has Child 查询,返回父文档
POST my_blogs/_search
{
  "query": {
    "has_child": {
      "type": "comment",
      "query" : {
            "match": {
                "username" : "Jack"
            }
        }
    }
  }
}


# Has Parent 查询，返回相关的子文档
POST my_blogs/_search
{
  "query": {
    "has_parent": {
      "parent_type": "blog",
      "query" : {
            "match": {
                "title" : "Learning Hadoop"
            }
        }
    }
  }
}



#通过ID ，访问子文档必须指定routing参数
GET my_blogs/_doc/comment3
#通过ID和routing ，访问子文档
GET my_blogs/_doc/comment3?routing=blog2

#更新子文档
PUT my_blogs/_doc/comment3?routing=blog2
{
    "comment": "Hello Hadoop??",
    "blog_comments_relation": {
      "name": "comment",
      "parent": "blog2"
    }
}


```
## 相关阅读
- https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-has-child-query.html
- https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-has-parent-query.html
- https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-parent-id-query.html
- https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-parent-id-query.html